# vim: ft=gitconfig ts=2 sw=2 noet

[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# search git log
	sl = !bash -c 'source $HOME/.functions && fzf_log'

	# log with patch
	lp = log --patch --ext-diff

	# show always with ext-diff
	sho = show --ext-diff
	s = show --ext-diff

	# showtool, like difftoo but for a single commit
	# required for the command above
	showtool = "!st() { rev=${1:-HEAD}; git difftool --no-prompt $rev~1 $rev; }; st $1"

	# prettier log with commit date
	lg = "log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short"

	# View the current working tree status using the short format / might remove the -s
	# s = status -s

	# show the current HEAD's commit hash
	id = log --pretty=format:'%H' -n 1

	# Initialize new empty repository
	it = !git init && git commit -m 'root' --allow-empty

	# Show the diff between the latest commit and the current state
	d = "!git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = "!d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = pull --recurse-submodules --autostash --rebase=interactive

	# Fetch all remotes and delete outdated tracking branches
	f = fetch --all --prune

	# Push with force, but the Light kind
	pff = push --force-with-lease

	# Pull changes into master without having to switch to it
	up = "!f() { git fetch ${2-origin} ${1-master}:${1-master}; }; f"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Select files to add
	a = !"git add $(git status -s | grep -E -v '^M' | sed 's/...//' | fzf -m +s --marker='+' --header='Select files (with tab) to stage' --layout=reverse)"

	# Select files to add patch-wise
	ap = !"git status -s | grep -E -v '^M' | sed 's/...//' | fzf -m +s --marker='+' --header='Select files (with tab) to stage patch-wise' --layout=reverse --print0 | xargs -0 -o -n1 git hunk"

	# Stage hunk-wise
	hunks = add -p

	# Stage single file hunk-wise, tracked it if necessary
	hunk = "!f() { git add --intent-to-add $1; git add --patch $1; }; f"

	# Remove from staging area
	unstage = restore --staged

	# Cherry pick
	cp = cherry-pick

	# Switch to a branch, creating it if necessary
	co = checkout -b
	mk = checkout -b

	# Just switch
	go = checkout
	cd = checkout

	# Switch to the commit of a branch/tag, in a detached state
	cod = "!f() { git switch --detach $(git rev-parse ${1-HEAD}); }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	ls = "!f() { git checkout $(git for-each-ref --sort='-authordate:iso8601' --no-merged=${1-main} --omit-empty --format='%(if)%(HEAD)%(then)%(else)%(objectname) %(refname:short)%(end)' refs/heads | fzf --with-nth=2 --cycle --preview='git preview {2}' | cut -d' ' -f2); }; f"
	preview = show --no-patch --format='format:     Sha: %H%n    Name: %D%n Version: %(describe:tags=true)%nAuthored: %ar (%ai)%n  Author: %aN <%aE>%n          %(trailers:key=Co-Authored-By,valueonly,separator=%x0A%          )%n%n%s%n%n%-N'

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Amend all changes to the previous commit
	again = commit --all --amend --reuse-message=HEAD

	# Change the commit message of the last commit
	reword = commit --amend

	# Prepare fixup for interactive rebase (fu = fix-up)
	# Call with the commit-ish hash that is the commit to be fixed
	fu = commit --fixup

	# Start interactive rebase while automatically selecting commits
	# that were created with `fu` for fixup at their repsective positions
	uf = rebase --autosquash --autostash --interactive

	# Fixup some previous commit, calling `fu $sha` and `uf $sha^`
	fufu = "!f() { git fu ${1-HEAD} && git uf ${1-HEAD}^; }; f"

	# ALias for fufu
	fixup = fufu

	# Rebase onto master
	remaster = "!f() { git fetch ${2-origin} ${1-master}:${1-master} && git uf ${1-master}; }; f"

	# Rebase onto main
	remain = "!f() { git fetch ${2-origin} ${1-main}:${1-main} && git uf ${1-main}; }; f"

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Continue directly with the rebase
	rec = "!GIT_EDITOR=true git rebase --continue"

	# Continue directly with the cherry-pick
	cpc = "!GIT_EDITOR=true git cherry-pick --continue"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = !git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# List merged Github PRs between two commits
	ghpr-diff = log --reverse --merges --fixed-strings --grep='Merge pull request' --pretty='tformat:- %b (%s)'

	# Checkout github PR
	copr = coprs

	# Show track files that are excluded
	excluded = ls-files -i --exclude-standard

	# doge mode (use together with alias such=' ')
	# `such git very push` -> `git push`
	very = !git

	# edit this config file
	edit-config = config --global -e

	# create a save-point (includes untracked files)
	save = !git add -A && git commit -m 'SAVEPOINT'

	# create a work-in-progress-point (don't include untracked files)
	wip = !git add -u && git commit -m WIP

	# undo last commit
	undo = revert --no-commit HEAD

	# throw away last commit (e.g. save point)
	throw-away = reset HEAD~1 --mixed

	# wipe current directory, but save state in reflog
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

	# fix 'git dad'
	dad = !curl -H \"Accept: text/plain\" https://icanhazdadjoke.com/ && echo  && git add

	# Run anything on root git dir
	run = "!exec "

	# Show git root
	proot = rev-parse --show-toplevel

	# Show the user email for the current repository.
	whoami = config user.email


[advice]

	# Don't warn on empty calls to git-add
	addEmptyPathspec = false

	# Don't warn upon entering a detached HEAD
	detachedHead = false

	# Disable message about skipping previously applied commits
	skippedCherryPicks = false

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true

	# Always do verbose commits
	verbose = true

[diff]

	# Detect copies as well as renames
	renames = copies

	# Remove the /a and /b prefixes from the diff view
	noprefix = true

	# According to delta
	colorMoved = default

	# https://difftastic.wilfred.me.uk/git.html
	external = difft

	algorithm = histogram

	tool = Kaleidoscope

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[diff "lockdiff"]
	# https://github.com/your-tools/lockdiff
	textconv = lockdiff

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = immediate

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

	# Use three-way conflict style merges
	#  https://blog.nilbus.com/take-the-pain-out-of-git-conflict-resolution-use-diff3/
	conflictstyle = zdiff3

	tool = Kaleidoscope

[push]

	# https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault
	default = simple
	autoSetupRemote = true

	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[pull]

	# Use rebase strategy for pulls by default
	rebase = true

[rebase]

	autosquash = true
	autostash = true

	# https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/
	updateRefs = true

[interactive]

	# Don't require to press Enter when doing an interactive add
	singlekey = true

[sequence]

	editor = interactive-rebase-tool

[rerere]

	enabled = true

# URL shorthands

[url "git@github.com:"]

	insteadOf = gh:
	pushInsteadOf = github:
	pushInsteadOf = git://github.com/

[url "git://github.com/"]

	insteadOf = github:

[url "git@gist.github.com:"]

	insteadOf = gst:
	pushInsteadOf = gist:
	pushInsteadOf = git://gist.github.com/

[url "git://gist.github.com/"]

	insteadOf = gist:

[init]

	defaultBranch = main

[difftool]
	prompt = false

[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[mergetool]
	prompt = false

[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true

[gpg]
	format = ssh

[gpg "ssh"]
	allowedSignersFile = "~/.ssh/allowed_signers"
